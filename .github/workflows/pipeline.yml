name: Go CI Pipeline

on:
  workflow_call:
    inputs:
      working-directory:
        description: 'Directory to the folder in which the app is located.'
        required: true
        type: string
        default: 'src'
      
      artifact-name:
        required: false
        type: string
        default: ${{ github.event.repository.name }}

      main-directory:
        description: 'Directory to the folder in which the func main is located.'
        required: false
        type: string
        default: './'

    outputs:
      version:
        value: ${{ jobs.build.outputs.version }}

jobs:
  lint:
    name: Linting
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.x # Replace with the desired Go version  

      - name: run lint
        uses: golangci/golangci-lint-action@v3
        with:
          working-directory: ${{ inputs.working-directory || 'src' }}
          args: --skip-dirs=gen
            
  unit-test:
    name: Unit test
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.x # Replace with the desired Go version
          cache-dependency-path: ${{ inputs.working-directory || 'src' }}/go.sum
  
      - name: Install dependencies
        working-directory: ${{ inputs.working-directory || 'src' }}
        run: go mod download
        
      - name: Test
        working-directory: ${{ inputs.working-directory || 'src' }}
        run:
          go test -v -cover ./... -json > TestResults-${{ inputs.artifact-name }}.json
       
      - name: Upload Go test results
        uses: actions/upload-artifact@v3
        with:
          name: TestResults-${{ inputs.artifact-name }}.json
          path: ${{ inputs.working-directory || 'src' }}   
           

  build:
    name: Build and upload
    runs-on: ubuntu-22.04
    needs: [ unit-test, lint ]
    outputs:
      version: ${{steps.build_number.outputs.BUILD_NUMBER}}
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with: 
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.x # Replace with the desired Go version
          cache-dependency-path: ${{ inputs.working-directory || 'src' }}/go.sum

      - name: Install dependencies
        run: go mod download
        working-directory: ${{ inputs.working-directory || 'src' }}

      - name: Build application
        run: 
          go build -o ${{ inputs.artifact-name }} ${{ inputs.main-directory }}
        working-directory: ${{ inputs.working-directory || 'src' }}

      - name: Determine PR
        id: pr_tag
        if: startsWith( github.ref, 'refs/pull/' )
        run: echo "pr_tag=0.0.0-PR-${{ github.event.pull_request.number}}-${{ github.run_number}}" >> $GITHUB_OUTPUT
      
      # when pr is merged, increase last digit of latest tag and add new tag
      - name: Create tag
        id: create_tag
        if: startsWith( github.ref, 'refs/heads/main' )
        run: |
          VERSION=`git tag -l --sort -version:refname | head -n 1`
          VERSION_BITS=(${VERSION//./ })
          [[ ${VERSION_BITS[0]} = '' ]] && VNUM1="v0" || VNUM1="${VERSION_BITS[0]}"
          [[ ${VERSION_BITS[1]} = '' ]] && VNUM2="0" || VNUM2="${VERSION_BITS[1]}"
          [[ ${VERSION_BITS[2]} = '' ]] && VNUM3="0" || VNUM3="${VERSION_BITS[2]}"
          VNUM3=$((VNUM3+1)) 
          NEW_TAG="$VNUM1.$VNUM2.$VNUM3"
          git tag $NEW_TAG
          git push origin --tags  
          echo "NEW_BUILD_VERSION=${NEW_TAG}" >> $GITHUB_OUTPUT 

      - name: Set build number
        id: build_number
        run: echo "BUILD_NUMBER=${{steps.pr_tag.outputs.pr_tag || steps.create_tag.outputs.NEW_BUILD_VERSION}}" >> $GITHUB_OUTPUT 
    
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}-${{steps.build_number.outputs.BUILD_NUMBER }}
          path: ${{ inputs.working-directory || 'src' }}
  
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.working-directory || 'src' }}
          push: false
          tags: ${{ inputs.artifact-name }}:${{steps.build_number.outputs.BUILD_NUMBER }}
        
      